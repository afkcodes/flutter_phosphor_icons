const fs = require('fs');
const thin = '../fonts/thin.css';
const light = '../fonts/style.css';
const regular = '../fonts/regular.css';
const bold = '../fonts/bold.css';
const fill = '../fonts/fill.css';

let raw_icons = [];
let raw_codes;

const tempDartClass = [];

const readIcons = function (file) {
  return fs
    .readFileSync(file)
    .toString()
    .match(/ph(.*)-\w+/gm);
};
const readIconsCode = function (file) {
  return fs
    .readFileSync(file)
    .toString()
    .match(/\\[a-z0-9](.*)\w+/gm);
};

const createIconsVariants = (path, name, family) => {
  const iconList = readIcons(path);
  raw_codes = readIconsCode(path);
  iconList.forEach((icon) => raw_icons.push(`${icon}-${name}`));

  let phosphorClassStart = `
  /* This file is automatically generated
      Phosphor Icons for flutter
      visit: https://phosphoricons.com/
  */

  import 'package:flutter/material.dart';

  class PhosphorIconsData extends IconData {
    const PhosphorIconsData(int code)
        : super(
            code,
            fontFamily: 'Phosphor-${family}',
            fontPackage: 'flutter_phosphor_icons',
          );
  }

  class PhosphorIcons${family}{
  `;

  tempDartClass.push(phosphorClassStart);

  raw_icons.forEach((el, index) => {
    let name = el.replace('ph-', '').replace(/-/g, '_');
    let code = `${raw_codes[index].replace('\\', '0x')}`;
    tempDartClass.push(
      `static const IconData ${name} = PhosphorIconsData(${code});\n`
    );
    obj = {};
  });

  tempDartClass.push('}');

  console.log(family);

  fs.writeFile(
    `../lib/phosphor_icons_${name}.dart`,
    tempDartClass.join('\n'),
    (err) => {
      if (err) throw err;
      console.log('Font data write complete');
    }
  );
  raw_codes = [];
  raw_icons = [];
};

const iconFiles = [
  { path: light, name: 'light', family: 'Light' },
  { path: light, name: 'regular', family: '' },
  { path: light, name: 'bold', family: 'Bold' },
  { path: light, name: 'fill', family: 'Fill' },
  { path: light, name: 'thin', family: 'Thin' },
];

iconFiles.forEach((icon) =>
  createIconsVariants(icon.path, icon.name, icon.family)
);
